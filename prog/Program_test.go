package prog

import (
	"reflect"
	"testing"
)

var programGetWordsTests = []struct{
	in Program
	out []uint32
}{
	{
		Program{
			Job: Job{
				ID:             0x01,
				NumberOfWords:  0x04,
				PriorityNumber: 0x01,
				Instructions: []uint32{
					0xFEEDFACE,
					0xF0F0F0F0,
					0xDEADBEEF,
					0x00000000,
				},
			},
			Data: Data{
				InputBufferSize:  0x05,
				OutputBufferSize: 0x02,
				TempBufferSize:   0x03,
				DataBlock: [44]uint32{
					/* 00 */ 0xFEEDFACE, 0xDEADBEEF, 0xFFFFFFFF, 0xFFFFFFFF,
					/* 04 */ 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF,
					/* 08 */ 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF,
					/* 12 */ 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF,
					/* 16 */ 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF,
					/* 20 */ 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF,
					/* 24 */ 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF,
					/* 28 */ 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF,
					/* 32 */ 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF,
					/* 36 */ 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF,
					/* 40 */ 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xF0F0F0F0,
				},
			},
		},
		[]uint32{
			/* JB */ 0xFEEDFACE, 0xF0F0F0F0, 0xDEADBEEF, 0x00000000,
			/* 00 */ 0xFEEDFACE, 0xDEADBEEF, 0xFFFFFFFF, 0xFFFFFFFF,
			/* 04 */ 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF,
			/* 08 */ 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF,
			/* 12 */ 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF,
			/* 16 */ 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF,
			/* 20 */ 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF,
			/* 24 */ 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF,
			/* 28 */ 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF,
			/* 32 */ 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF,
			/* 36 */ 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF,
			/* 40 */ 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xF0F0F0F0,
		},
	},
	{
		Program{
  		Job: Job{
  			ID:             0x01,
  			NumberOfWords:  23,
  			PriorityNumber: 0x01,
  			Instructions: []uint32{
          0xC050005C, 0x4B060000, 0x4B010000, 0x4B000000,
        	0x4F0A005C, 0x4F0D00DC, 0x4C0A0004, 0xC0BA0000,
        	0x42BD0000, 0x4C0D0004, 0x4C060001, 0x10658000,
        	0x56810018, 0x4B060000, 0x4F0900DC, 0x43970000,
        	0x05070000, 0x4C060001, 0x4C090004, 0x10658000,
        	0x5681003C, 0xC10000AC, 0x92000000,
  			},
  		},
  		Data: Data{
  			InputBufferSize:  0x05,
  			OutputBufferSize: 0x02,
  			TempBufferSize:   0x03,
  			DataBlock: [44]uint32{
          0x0000000A, 0x00000006, 0x0000002C, 0x00000045,
          0x00000001, 0x00000007, 0x00000000, 0x00000001,
          0x00000005, 0x0000000A, 0x00000055, 0x00000000,
          0x00000000, 0x00000000, 0x00000000, 0x00000000,
          0x00000000, 0x00000000, 0x00000000, 0x00000000,
          0x00000000, 0x00000000, 0x00000000, 0x00000000,
          0x00000000, 0x00000000, 0x00000000, 0x00000000,
          0x00000000, 0x00000000, 0x00000000, 0x00000000,
          0x00000000, 0x00000000, 0x00000000, 0x00000000,
          0x00000000, 0x00000000, 0x00000000, 0x00000000,
          0x00000000, 0x00000000, 0x00000000, 0x00000000,
  			},
  		},
  	},
		[]uint32{
			0xC050005C, 0x4B060000, 0x4B010000, 0x4B000000,
			0x4F0A005C, 0x4F0D00DC, 0x4C0A0004, 0xC0BA0000,
			0x42BD0000, 0x4C0D0004, 0x4C060001, 0x10658000,
			0x56810018, 0x4B060000, 0x4F0900DC, 0x43970000,
			0x05070000, 0x4C060001, 0x4C090004, 0x10658000,
			0x5681003C, 0xC10000AC, 0x92000000, 0x0000000A,
			0x00000006, 0x0000002C, 0x00000045, 0x00000001,
			0x00000007, 0x00000000, 0x00000001, 0x00000005,
			0x0000000A, 0x00000055, 0x00000000, 0x00000000,
			0x00000000, 0x00000000, 0x00000000, 0x00000000,
			0x00000000, 0x00000000, 0x00000000, 0x00000000,
			0x00000000, 0x00000000, 0x00000000, 0x00000000,
			0x00000000, 0x00000000, 0x00000000, 0x00000000,
			0x00000000, 0x00000000, 0x00000000, 0x00000000,
			0x00000000, 0x00000000, 0x00000000, 0x00000000,
			0x00000000, 0x00000000, 0x00000000, 0x00000000,
			0x00000000, 0x00000000, 0x00000000,
		},
	},
}

func TestProgramGetWords(t *testing.T) {
	for _, tt := range programGetWordsTests {
		words := tt.in.GetWords()
		if !reflect.DeepEqual(words, tt.out) {
			t.Errorf(
				"%s\nhave\t%08X\nwant\t%08X\n",
        "(Program)GetWords() did not return the expected value",
				words, tt.out,
			)
		}

	}
}
